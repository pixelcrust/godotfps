[gd_scene load_steps=14 format=3 uid="uid://dj1r66vn40rp2"]

[ext_resource type="Script" uid="uid://b3dkvgdgkrhf3" path="res://Scripts/lava.gd" id="1_37c4s"]
[ext_resource type="PackedScene" uid="uid://d1abpix2tact" path="res://Scenes/effects/lava_splash.tscn" id="2_3hync"]

[sub_resource type="BoxShape3D" id="BoxShape3D_us7j0"]

[sub_resource type="Shader" id="Shader_xd1hf"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.2.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_always,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
uniform sampler2D texture_emission : source_color, hint_default_black,filter_linear_mipmap,repeat_enable;
uniform vec4 emission : source_color;
uniform float emission_energy;
uniform sampler2D texture_refraction : filter_linear_mipmap,repeat_enable;
uniform float refraction : hint_range(-16,16);
uniform vec4 refraction_texture_channel;
uniform sampler2D screen_texture : hint_screen_texture, repeat_disable, filter_linear_mipmap;uniform sampler2D texture_normal : hint_roughness_normal,filter_linear_mipmap,repeat_enable;
uniform float normal_scale : hint_range(-16,16);
varying vec3 uv1_triplanar_pos;
uniform float uv1_blend_sharpness;
varying vec3 uv1_power_normal;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	vec3 normal = MODEL_NORMAL_MATRIX * NORMAL;
	TANGENT = vec3(0.0,0.0,-1.0) * abs(normal.x);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(normal.y);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(normal.z);
	TANGENT = inverse(MODEL_NORMAL_MATRIX) * normalize(TANGENT);
	BINORMAL = vec3(0.0,1.0,0.0) * abs(normal.x);
	BINORMAL+= vec3(0.0,0.0,-1.0) * abs(normal.y);
	BINORMAL+= vec3(0.0,1.0,0.0) * abs(normal.z);
	BINORMAL = inverse(MODEL_NORMAL_MATRIX) * normalize(BINORMAL);
	uv1_power_normal=pow(abs(normal),vec3(uv1_blend_sharpness));
	uv1_triplanar_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0f)).xyz * uv1_scale + uv1_offset +TIME *0.01;
	uv1_power_normal/=dot(uv1_power_normal,vec3(1.0));
	uv1_triplanar_pos *= vec3(1.0,-1.0, 1.0);
}




vec4 triplanar_texture(sampler2D p_sampler,vec3 p_weights,vec3 p_triplanar_pos) {
	vec4 samp=vec4(0.0);
	samp+= texture(p_sampler,p_triplanar_pos.xy) * p_weights.z;
	samp+= texture(p_sampler,p_triplanar_pos.xz) * p_weights.y;
	samp+= texture(p_sampler,p_triplanar_pos.zy * vec2(-1.0,1.0)) * p_weights.x;
	return samp;
}


void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo,uv1_power_normal,uv1_triplanar_pos);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(triplanar_texture(texture_metallic,uv1_power_normal,uv1_triplanar_pos),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(triplanar_texture(texture_roughness,uv1_power_normal,uv1_triplanar_pos),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	NORMAL_MAP = triplanar_texture(texture_normal,uv1_power_normal,uv1_triplanar_pos).rgb;
	NORMAL_MAP_DEPTH = normal_scale;
	vec3 emission_tex = triplanar_texture(texture_emission,uv1_power_normal,uv1_triplanar_pos).rgb;
	EMISSION = (emission.rgb+emission_tex)*emission_energy;
	vec3 unpacked_normal = NORMAL_MAP;
	unpacked_normal.xy = unpacked_normal.xy * 2.0 - 1.0;
	unpacked_normal.z = sqrt(max(0.0, 1.0 - dot(unpacked_normal.xy, unpacked_normal.xy)));
	vec3 ref_normal = normalize( mix(NORMAL,TANGENT * unpacked_normal.x + BINORMAL * unpacked_normal.y + NORMAL * unpacked_normal.z,NORMAL_MAP_DEPTH) );
	vec2 ref_ofs = SCREEN_UV - ref_normal.xy * dot(triplanar_texture(texture_refraction,uv1_power_normal,uv1_triplanar_pos),refraction_texture_channel) * refraction;
	float ref_amount = 1.0 - albedo.a * albedo_tex.a;
	EMISSION += textureLod(screen_texture,ref_ofs,ROUGHNESS * 8.0).rgb * ref_amount * EXPOSURE;
	ALBEDO *= 1.0 - ref_amount;
	ALPHA = 1.0;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_vtqdu"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_dbp3a"]
seamless = true
as_normal_map = true
noise = SubResource("FastNoiseLite_vtqdu")

[sub_resource type="Gradient" id="Gradient_pxrfb"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_ff5eh"]
seamless = true
as_normal_map = true
bump_strength = 16.0
color_ramp = SubResource("Gradient_pxrfb")
noise = SubResource("FastNoiseLite_vtqdu")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_o62f6"]
render_priority = 0
shader = SubResource("Shader_xd1hf")
shader_parameter/albedo = Color(0.870588, 0.0941176, 0, 0.513726)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.5
shader_parameter/metallic_texture_channel = Vector4(0, 0, 0, 0)
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/emission = Color(0.619608, 0, 0, 1)
shader_parameter/emission_energy = 1.0
shader_parameter/texture_refraction = SubResource("NoiseTexture2D_ff5eh")
shader_parameter/refraction = 0.05
shader_parameter/refraction_texture_channel = Vector4(0, 0, 0, 0)
shader_parameter/texture_normal = SubResource("NoiseTexture2D_dbp3a")
shader_parameter/normal_scale = 1.0
shader_parameter/uv1_blend_sharpness = 1.0
shader_parameter/uv1_scale = Vector3(0.1, 0.1, 0.1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)

[sub_resource type="BoxMesh" id="BoxMesh_l1iw8"]
material = SubResource("ShaderMaterial_o62f6")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_bwybg"]
emission_shape = 3
emission_box_extents = Vector3(0.5, 0.5, 0.5)
direction = Vector3(-1, 0, 0)
gravity = Vector3(0, 1, 0)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_5tb2s"]
albedo_color = Color(1, 0.694118, 0, 1)
emission_enabled = true
emission = Color(0.780392, 0.670588, 0, 1)

[sub_resource type="BoxMesh" id="BoxMesh_roskq"]
material = SubResource("StandardMaterial3D_5tb2s")
size = Vector3(0.1, 0.1, 0.1)

[node name="lava" type="Node3D"]
script = ExtResource("1_37c4s")

[node name="lava_splash" parent="." instance=ExtResource("2_3hync")]

[node name="Area3D" type="Area3D" parent="." groups=["liquid"]]
collision_layer = 263
collision_mask = 6

[node name="CollisionShape3D" type="CollisionShape3D" parent="Area3D"]
shape = SubResource("BoxShape3D_us7j0")

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
mesh = SubResource("BoxMesh_l1iw8")

[node name="GPUParticles3D" type="GPUParticles3D" parent="."]
amount = 32
lifetime = 5.0
randomness = 1.0
visibility_aabb = AABB(-1.16435, -4, -1.37719, 2.30525, 8, 2.75438)
process_material = SubResource("ParticleProcessMaterial_bwybg")
draw_pass_1 = SubResource("BoxMesh_roskq")

[node name="AudioStreamPlayer3D" type="AudioStreamPlayer3D" parent="."]

[connection signal="body_entered" from="Area3D" to="." method="_on_area_3d_body_entered"]
[connection signal="body_exited" from="Area3D" to="." method="_on_area_3d_body_exited"]
